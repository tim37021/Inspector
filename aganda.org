* Schedule [50%]
** DONE Python Template for Adding New Signal Source
** DONE Refactor modules
** DONE Save Buffer
   This is a hard one currently
** DONE Reduce copy from python to SignalPlot
   Currently the draw path is too long
** DONE Eliminate Warnings [2/2]
   - [X] FileDialog
     The warnings is actually Qt's bug
   - [X] Array out of bound when mouse move
** DONE Key-binding Manage System
** DONE SignalPlotControl Refactor
** TODO DSP Framework [4/5]
- [X] [[./Buffer.py::StorageNode][StorageNode]]
- [X] [[./Buffer.py::RingBuffer][RingBuffer]]
- [X] [[./Buffer.py::StorageBuffer][StorageBuffer]]
- [X] [[./Buffer.py::BufferView][BufferView]]
- [ ] Load File
** TODO SignalOutput Interface
** TODO BufferPlayer
** TODO Bug Fix: AudioInputDevice Stucks After A Few Second
** STRT Test for Multi Channels [1/2]
- [X] Work
- [ ] Test
** TODO Use SoundDevice Package
** TODO Performance of BufferView
Currently, getting slice of a data require several copies in SignalOutputNumpy, O(1) in SignalOutput
#+BEGIN_SRC javascript
new Float32Array(node.output.buffer, offset * 4, length)
#+END_SRC
* DSP Framework Draft
This new arch is to bring better realtime experience to Inspector
** Basic Usage
#+BEGIN_SRC qml
import inspector.dsp 1.0

AudioDiscoveryModelProvider {
    id: provider
}

AudioInputDevice2 {
    id: aid
    deviceIndex: provider.defaultInputDeviceIndex
    rate: 44100
    bufferLength: 1024
}

// sb.output
StorageBuffer {
    id: sb
    input: aid.output
}

BufferView {
    channels: [0, 1, 2]
}

ChannelView {
    channel: 0
}

AudioOutputDevice2 {
    input: aid.output
    deviceIndex: provider.defaultOutputDeviceIndex
    rate: 44100
    bufferLength: 16
}
#+END_SRC
Reference:
[[./plugins/hcmusic/audio/AudioDevice.py::AudioInputDevice2]]
[[./plugins/hcmusic/audio/AudioDevice.py::AudioOutputDevice2]]
[[./Buffer.py::SignalOutput]] - SignalOutput is a class that handles IO of a node.
[[./Buffer.py::ProcessorNode]] - ProcessorNode is a node that has input and output
** BufferView and Channel
In order to slice a buffer, we can use [[./Buffer.py::BufferView][BufferView]]
#+BEGIN_SRC qml
BufferView {
    input: aid.output
    offset: 0
    length: aid.output.length
    channels: [0, 1, 2]
}

Channel {
    input: aid.output
}
#+END_SRC
